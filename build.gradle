//file:noinspection GroovyAssignabilityCheck

plugins {
    id("java")
    id("org.cadixdev.licenser").version("0.6.1")
    id("com.github.johnrengelman.shadow").version("7.1.2")
}

setGroup("net.elytrium")
setVersion("1.0.11-SNAPSHOT")

compileJava {
    getOptions().setEncoding("UTF-8")
}

java {
    setSourceCompatibility(JavaVersion.VERSION_17)
    setTargetCompatibility(JavaVersion.VERSION_17)
}

repositories {
    mavenCentral()

    maven {
        setName("elytrium-repo")
        setUrl("https://maven.elytrium.net/repo/")
    }
    maven {
        setName("papermc-repo")
        setUrl("https://papermc.io/repo/repository/maven-public/")
    }
    maven {
        setName("opencollab-repo")
        setUrl("https://repo.opencollab.dev/maven-snapshots/")
    }
    maven {
        setName("jitpack")
        setUrl("https://jitpack.io")
    }
}

dependencies {
    compileOnly("net.elytrium.limboapi:api:$limboapiVersion")
    compileOnly('com.github.ForsDev:LimboAuth:-SNAPSHOT')
    compileOnly("net.elytrium.commons:config:$elytriumCommonsVersion")
    compileOnly("net.elytrium.commons:utils:$elytriumCommonsVersion")
    compileOnly("net.elytrium.commons:velocity:$elytriumCommonsVersion")
    compileOnly("net.elytrium.commons:kyori:$elytriumCommonsVersion")
    compileOnly("com.velocitypowered:velocity-api:$velocityVersion")
    annotationProcessor("com.velocitypowered:velocity-api:$velocityVersion")

    implementation("net.dv8tion:JDA:$jdaVersion") {
        exclude module: "opus-java"
    }
    implementation("org.telegram:telegrambots:$telegrambotsVersion")
    implementation("com.vk.api:sdk:$vkVersion")

    implementation("com.maxmind.geoip2:geoip2:$geoipVersion")
    implementation("org.apache.commons:commons-compress:$apacheCompressCommonsVersion")

    implementation("org.bstats:bstats-velocity:$bstatsVersion")
    compileOnly("com.github.spotbugs:spotbugs-annotations:$spotbugsVersion")
}

shadowJar {
    getArchiveClassifier().set("")

    exclude("META-INF/maven/**")
    exclude("META-INF/INFO_BIN")
    exclude("META-INF/INFO_SRC")
    exclude("org/slf4j/**")
    exclude("google/protobuf/**")
    exclude("com/google/protobuf/**")
    exclude("org/apache/commons/codec/language/**")
    exclude("org/checkerframework/**")
    exclude("**/package-info.class")

    minimize()

    // Why are we increasing the size of the plugin if we can do that? :thinking:
    relocate("org.bstats", "net.elytrium.limboapi.thirdparty.org.bstats")
    exclude("org/bstats/**")

    relocate("net.dv8tion.jda", "net.elytrium.limboauth.socialaddon.thirdparty.net.dv8tion.jda")
    relocate("org.telegram.telegrambots", "net.elytrium.limboauth.socialaddon.thirdparty.org.telegram.telegrambots")
    relocate("com.vk.api", "net.elytrium.limboauth.socialaddon.thirdparty.com.vk.api")
    relocate("net.elytrium.commons.velocity", "net.elytrium.limboapi.thirdparty.commons.velocity")
    relocate("net.elytrium.commons.kyori", "net.elytrium.limboapi.thirdparty.commons.kyori")
    relocate("net.elytrium.commons.config", "net.elytrium.limboapi.thirdparty.commons.config")
}

license {
    setHeader(file("HEADER.txt"))
}

sourceSets.main.getJava().srcDir(getTasks().register("generateTemplates", Copy) { task ->
    task.getInputs().properties("version": getVersion())

    task.from(file("src/main/templates"))
            .into(getLayout().getBuildDirectory().dir("generated/sources/templates"))
            .expand("version": getVersion())
}.map {
    it.getOutputs()
})

assemble.dependsOn(shadowJar)